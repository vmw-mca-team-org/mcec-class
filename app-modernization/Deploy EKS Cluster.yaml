---
project: "My MCEC Project"
kind: PIPELINE
name: Deploy EKS Cluster
icon: organization,left, is-warning
enabled: true
concurrency: 10
input:
  Add_to_Cloud_Assembly: 'Yes'
  Add_to_Code_Stream: 'Yes'
  Add_to_TMC: 'Yes'
  AWS_EC2_SSH_KEY_PAIR: deploy-eks-keys
  AWS_REGION: us-west-2
  Cluster_Name: ''
  Node_instance_size: t3.small
  NodeGroup_Name: Standard
  Project: 'My MCEC Project'
_inputMeta:
  Project:
    description: Provide vRA Project name for k8s endpoints to be attached
    mandatory: true
  AWS_REGION:
    description: Specifies the AWS Region to send the request to.
    mandatory: true
  Node_instance_size:
    description: Provide an instance size to use for the EKS cluster nodes
    mandatory: true
  Add_to_TMC:
    description: Add Cluster to Tanzu Mission Control = Yes or No
    mandatory: true
  Add_to_Cloud_Assembly:
    description: Add Cluster to Cloud Assembly as K8s endpoint = Yes or No
    mandatory: true
  NodeGroup_Name:
    description: Provide a name for the EKS Cluster node group
    mandatory: true
  Add_to_Code_Stream:
    description: Add Cluster to Code Stream as K8s endpoint = Yes or No
    mandatory: true
  AWS_EC2_SSH_KEY_PAIR:
    description: Provide existing EC2 key pair to be used for SSH access to Cluster nodes
    mandatory: true
  Cluster_Name:
    description: Provide a name for the EKS Cluster
    mandatory: true
workspace:
  type: DOCKER
  endpoint: dockerhost
  image: saintdle/aws-k8s-ci
  registry: ''
  path: ''
  autoCloneForTrigger: false
  limits:
    memory: 512
    cpu: 1.0
stageOrder:
- Build EKS Cluster
- Add EKS Cluster to vRA
- Add EKS to TMC
stages:
  Add EKS Cluster to vRA:
    taskOrder:
    - Create Cluster Service Account
    - Create Role Binding
    - Get EKS Cluster details,Get vRA Cloud API Token
    - Create Code Stream Endpoint,Create Cloud Assembly K8s Endpoint
    tasks:
      Create Cloud Assembly K8s Endpoint:
        type: REST
        preCondition: ${input.Add_to_Cloud_Assembly} == "Yes"
        input:
          action: post
          url: https://sg.api.mgmt.cloud.vmware.com/cmx/api/resources/k8s/clusters/
          headers:
            Accept: application/json
            Content-Type: application/json
            Authorization: Bearer ${Add EKS Cluster to vRA.Get vRA Cloud API Token.output.responseBody.access_token}
          payload: |-
            {
              "name": "${input.Cluster_Name}",
              "description": "Cluster created from Pipeline",
              "address": "${Add EKS Cluster to vRA.Get EKS Cluster details.output.exports.APISERVER}",
              "credentials": {
                "privateKey": "${Add EKS Cluster to vRA.Get EKS Cluster details.output.exports.TOKEN}",
                "type": "Bearer"
              },
              "clusterType": "EXTERNAL",
              "caCertificate": "${Add EKS Cluster to vRA.Get EKS Cluster details.output.exports.clusterCACertificate}",
              "shared": "true",
              "global": "true"
            }
      Create Role Binding:
        type: CI
        preCondition: ${input.Add_to_Code_Stream} == "Yes" || ${input.Add_to_Cloud_Assembly} == "Yes"
        input:
          steps:
          - tee svc-rbac.yaml > /dev/null << EOF
          - 'apiVersion: rbac.authorization.k8s.io/v1'
          - 'kind: ClusterRoleBinding'
          - 'metadata:'
          - '  name: vra-admin'
          - 'roleRef:'
          - '  apiGroup: rbac.authorization.k8s.io'
          - '  kind: ClusterRole'
          - '  name: cluster-admin'
          - 'subjects:'
          - '  - kind: ServiceAccount'
          - '    name: vra-admin'
          - '    namespace: kube-system'
          - EOF
          - ''
          - kubectl apply -f svc-rbac.yaml
          export: [
            ]
          artifacts: [
            ]
          process: [
            ]
      Create Code Stream Endpoint:
        type: REST
        preCondition: ${input.Add_to_Code_Stream} == "Yes"
        input:
          action: post
          url: https://sg.api.mgmt.cloud.vmware.com/codestream/api/endpoints
          headers:
            Accept: application/json
            Content-Type: application/json
            Authorization: Bearer ${Add EKS Cluster to vRA.Get vRA Cloud API Token.output.responseBody.access_token}
          payload: |-
            {
                "name": "${input.Cluster_Name}",
                "description": "Cluster Created From Pipeline",
                "isRestricted": "",
                "properties": {
                    "leMansAgent": "default",
                    "kubernetesURL": "${Add EKS Cluster to vRA.Get EKS Cluster details.output.exports.APISERVER}",
                    "authType": "token",
                    "token": "${Add EKS Cluster to vRA.Get EKS Cluster details.output.exports.TOKEN}",
                    "fingerprint": "${Add EKS Cluster to vRA.Get EKS Cluster details.output.exports.FINGERPRINT}"
                },
                "type": "k8s",
                "project": "${input.Project}"
            }
      Get vRA Cloud API Token:
        type: REST
        preCondition: ${input.Add_to_Code_Stream} == "Yes" || ${input.Add_to_Cloud_Assembly} == "Yes"
        input:
          action: post
          url: https://console.cloud.vmware.com/csp/gateway/am/api/auth/api-tokens/authorize?refresh_token=${var.eks_vra_token}
          headers:
            Accept: application/json
            Content-Type: application/json
          payload: ''
      Get EKS Cluster details:
        type: CI
        preCondition: ${input.Add_to_Code_Stream} == "Yes" || ${input.Add_to_Cloud_Assembly} == "Yes"
        input:
          steps:
          - export APISERVER=$(kubectl config view --minify | grep server | cut -f 2- -d ":" | tr -d "
            ")
          - APISERVERNOHTTPS=$(echo $APISERVER | cut -c 9-)
          - HTTPSPORT=443
          - FPRINT=$(openssl s_client -connect $APISERVERNOHTTPS:$HTTPSPORT < /dev/null 2>/dev/null |
            openssl x509 -fingerprint -sha256 -noout -in /dev/stdin)
          - export FINGERPRINT=$(echo $FPRINT | cut -c 20-)
          - TOKENNAME=$(kubectl -n kube-system get serviceaccount/vra-admin -o jsonpath='{.secrets[0].name}')
          - export TOKEN=$(kubectl -n kube-system get secret $TOKENNAME -o jsonpath='{.data.token}'| base64
            --decode)
          - export clusterCACertificate=$(kubectl config view --minify --raw -o json | jq '.clusters[0].cluster["certificate-authority-data"]'
            | sed 's/"//g' )
          export:
          - TOKEN
          - FINGERPRINT
          - APISERVER
          - clusterCACertificate
          artifacts: [
            ]
          process: [
            ]
      Create Cluster Service Account:
        type: CI
        input:
          steps:
          - tee cluster_sa.yaml > /dev/null << EOF
          - 'apiVersion: v1'
          - 'kind: ServiceAccount'
          - 'metadata:'
          - '  name: vra-admin'
          - '  namespace: kube-system'
          - EOF
          - ''
          - kubectl apply -f cluster_sa.yaml
          export: [
            ]
          artifacts: [
            ]
          process: [
            ]
  Build EKS Cluster:
    taskOrder:
    - Build EKS Cluster
    tasks:
      Build EKS Cluster:
        type: CI
        input:
          steps:
          - 'aws configure set aws_access_key_id ${var.eks_aws_access_key_id} '
          - 'aws configure set aws_secret_access_key ${var.eks_aws_secret_access_key} '
          - aws configure set default.region ${input.AWS_REGION}
          - ''
          - eksctl create cluster -n "${input.Cluster_Name}" --region "${input.AWS_REGION}" --nodegroup-name
            "${input.NodeGroup_Name}" --node-type "${input.Node_instance_size}" --managed --ssh-access  --ssh-public-key="${input.AWS_EC2_SSH_KEY_PAIR}"
            --nodes "3"
          export: [
            ]
          artifacts: [
            ]
          process: [
            ]
  Add EKS to TMC:
    taskOrder:
    - Get TMC API Token
    - Create TMC cluster attach task
    - Install TMC to Cluster
    - Disable Pinniped
    tasks:
      Create TMC cluster attach task:
        type: REST
        preCondition: ${input.Add_to_TMC} == "Yes"
        input:
          action: post
          url: https://${var.eks_tmc_url}/v1alpha1/clusters
          headers:
            Accept: application/json
            Content-Type: application/json
            Authorization: Bearer ${Add EKS to TMC.Get TMC API Token.output.responseBody.access_token}
          payload: '{"cluster":{"fullName":{"managementClusterName":"attached","provisionerName":"attached","name":"${input.Cluster_Name}"},"meta":{},"spec":{"clusterGroupName":"default"}}}'
      Install TMC to Cluster:
        type: CI
        preCondition: ${input.Add_to_TMC} == "Yes"
        input:
          steps:
          - ''
          - kubectl create -f "${Add EKS to TMC.Create TMC cluster attach task.output.responseBody.cluster.status.installerLink}"
          - ''
          - currentstatus=$(curl --location --request GET 'https://${var.eks_tmc_url}/v1alpha1/clusters/${input.Cluster_Name}?full_name.managementClusterName=attached&full_name.provisionerName=attached'
            \
          - '--header ''Authorization: Bearer ${Add EKS to TMC.Get TMC API Token.output.responseBody.access_token}''
            | jq ''.cluster.status.health'' | sed ''s/"//g'' )'
          - statusdone=HEALTHY
          - while [ $currentstatus != $statusdone ]
          - do
          - '  echo "Waiting for Cluster to Synchronise with TMC"'
          - '  sleep 15'
          - '  currentstatus=$(curl --location --request GET ''https://${var.eks_tmc_url}/v1alpha1/clusters/${input.Cluster_Name}?full_name.managementClusterName=attached&full_name.provisionerName=attached''
            \'
          - '--header ''Authorization: Bearer ${Add EKS to TMC.Get TMC API Token.output.responseBody.access_token}''
            | jq ''.cluster.status.health'' | sed ''s/"//g'' )'
          - done
          export: [
            ]
          artifacts: [
            ]
          process: [
            ]
      Get TMC API Token:
        type: REST
        preCondition: ${input.Add_to_TMC} == "Yes"
        input:
          action: post
          url: https://console.cloud.vmware.com/csp/gateway/am/api/auth/api-tokens/authorize?refresh_token=${var.eks_tmc_token}
          headers:
            Accept: application/json
            Content-Type: application/json
          payload: ''
      Disable Pinniped:
        type: CI
        input:
          steps:
          - 'kubectl patch credentialissuer cluster-auth-pinniped-config  --type=json -p ''[{"op":"replace","path":"/spec/impersonationProxy/service/annotations/service.beta.kubernetes.io~1aws-load-balancer-internal",
            "value": "false" }]'''
          - ''
          - kubectl delete services -n vmware-system-tmc cluster-auth-pinniped-impersonation-proxy-load-balancer
          export: [
            ]
          artifacts: [
            ]
          process: [
            ]
